#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 31 12:49:32 2023

@author: s1984454
"""
import numpy as np
from scipy.integrate import solve_ivp
from scipy.special import gammainc, gamma
import matplotlib.pyplot as plt
from RLoKi import RLoKi,determine_critical_chi
from RLoKi_asymptotics import RLoKi_asymp,determine_critical_chi_asymp
from LoKi import LoKi
import pickle 
from scipy.stats import linregress
from scipy.special import gammainc,gamma

plt.rc('text', usetex=True)
plt.rc('font', family='serif')
plt.rc('font', weight='bold')
plt.rc('font', size=14)

def fit_log(x,y):
    
    x = np.log10(x)
    y = np.log10(y)
    result = linregress(x,y)
    slope = result[0]
    intercept = result[1]
    
    fitted_line = 10**(slope*x + intercept)

    return slope, intercept, fitted_line

### Checking large radius behaviour of gamma_2,u_10
# Psi = 5
# epsilon = 0.1

# with open('Data/chi_crit_Psi_' + str(Psi) + '_eps_' + str(epsilon) + '.pkl', 'rb') as f:
#     results_dict = pickle.load(f)

# idx = np.where(results_dict['chi_crits'] == min(results_dict['chi_crits']))[0][0]

# mu = results_dict['mus'][idx]

# chis, chi_crit, model,rb = determine_critical_chi_asymp(mu,epsilon, Psi, 3.90625e-05)

# fig1, ax1 = plt.subplots(1,1)
# ax1.plot(model.rhat, model.gamma_2, label = '$\\gamma_2$')
# slope1, intercept1, fitted_line1 = fit_log(model.rhat,model.gamma_2)
# ax1.plot(model.rhat, fitted_line1, label = 'fit, slope = ' + str(slope1))
# ax1.legend()


# fig2,ax2 = plt.subplots(1,1)
# ax2.plot(model.rhat,model.psi_theta_r(np.pi/2), label = 'Asymptotics Equatorial')
# ax2.axhline(y = 0, linestyle = '--', color = 'k')

# fig3, ax3 = plt.subplots(1,1)
# ax3.plot(model.rhat, model.u_10, label = '$u_{10}$')
# slope2, intercept2, fitted_line2 = fit_log(model.rhat,model.u_10)
# ax3.plot(model.rhat, fitted_line2, label = 'fit, slope = ' + str(slope2))
# ax3.legend()

### Scaling of chi_crit

# Psi = 5
# epsilons = [0.005,0.01,0.025,0.05,0.1]
# chi_crits = []

# alpha_c = 8.030303030303024
# D_Psi = 0.6513598610176601
# C_Psi = -4.962353926613957
# kappa = 18/(5*np.exp(Psi)*gamma(5/2)*gammainc(5/2,Psi)) 

# for epsilon in epsilons:
#     print(epsilon)
#     A_2 = alpha_c-D_Psi- 40*np.power(kappa,2)*np.power(Psi,4)*np.log(epsilon)
#     a_0 = (A_2*np.power(epsilon,2)-C_Psi)*np.power(epsilon,2)
#     mu = (Psi-a_0)*(4*np.pi*epsilon)/9
#     chis, chi_crit, model,rb = determine_critical_chi_asymp(mu,epsilon, Psi, 3.90625e-05/16)
#     chi_crits.append(chi_crit)

# fig4, ax4 = plt.subplots(1,1)
# slope3, intercept3, fitted_line3 = fit_log(epsilons,chi_crits)
# ax4.plot(epsilons, fitted_line3, label = 'fit, slope = ' + str(slope3), color = 'k')
# ax4.scatter(epsilons, chi_crits, marker = 'x', color = 'r')
# ax4.legend()
# ax4.set_xscale('log')
# ax4.set_yscale('log')
# ax4.set_xlabel('$\\epsilon$')
# ax4.set_ylabel('$\\chi_c$')
# ax4.set_title('$\\Psi = $' + str(Psi))

#### Check on boundary layer solution as a description of the outer portion of the domain.

# Psi = 5
# epsilon = 0.01
# mu = 0.01

# chis, chi_crit, model,rb = determine_critical_chi_asymp(mu,epsilon, Psi, 3.90625e-05/16)
# full_model = RLoKi(mu, epsilon, Psi, chi_crit)

# theta = np.pi/2

# eta =  (model.rt - model.rhat)/chi_crit

# F_0 = -model.lambda_0/(model.rt**2)
# G_0 = model.u_10_rt + model.A_2 * model.gamma_2_rt * 0.5 * (3*np.cos(theta)**2 - 1)
# F_1 = -1 * (model.u_10_grad_rt + model.A_2 * model.gamma_2_grad_rt * 0.5 * (3*np.cos(theta)**2 - 1) )

# tau_0 = F_0 * eta + G_0
# tau_1 = chi_crit * ((F_0/model.rt) * eta**2 + F_1 * eta) 

# tau = tau_0 + tau_1

# layer_psi = chi_crit * tau

# fig5,ax5 = plt.subplots(1,1)
# ax5.plot(model.rhat,model.psi_theta_r(theta), label = 'Asymptotic solution')
# ax5.plot(model.rhat, layer_psi, label = 'Boundary layer') 
# ax5.plot(full_model.r_grid, full_model.interp_to_theta(theta), label = 'Iterative solution')
# ax5.axhline(y=0, linestyle = '--', color = 'k')
# ax5.axvline(x=model.rt, linestyle = '--', color = 'k')
# ax5.legend()






















